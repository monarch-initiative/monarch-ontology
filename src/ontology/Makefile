# ----------------------------------------
# Makefile for mo
# Generated using ontology-development-kit
# ODK Version: v1.2.33-dev
# ----------------------------------------
# IMPORTANT: DO NOT EDIT THIS FILE. To override default make goals, use mo.Makefile instead


# ----------------------------------------
# More information: https://github.com/INCATools/ontology-development-kit/


# ----------------------------------------
# Standard Constants
# ----------------------------------------
# these can be overwritten on the command line

URIBASE=                    http://purl.obolibrary.org/obo
ONT=                        mo
ONTBASE=                    $(URIBASE)/$(ONT)
EDIT_FORMAT=                owl
SRC =                       $(ONT)-edit.$(EDIT_FORMAT)
CATALOG=                    catalog-v001.xml
ROBOT=                      robot --catalog $(CATALOG)

OWLTOOLS=                   owltools --use-catalog
RELEASEDIR=                 ../..
REPORTDIR=                  reports
TEMPLATEDIR=                ../templates
TMPDIR=                     tmp
SCRIPTSDIR=                 ../scripts
SPARQLDIR =                 ../sparql
COMPONENTSDIR =             components
REPORT_FAIL_ON =            None
REPORT_LABEL =              -l true
REPORT_PROFILE_OPTS =       
OBO_FORMAT_OPTIONS =        
SPARQL_VALIDATION_CHECKS =   equivalent-classes owldef-self-reference
SPARQL_EXPORTS =             basic-report class-count-by-prefix edges xrefs obsoletes synonyms
ODK_VERSION_MAKEFILE =      v1.2.33-dev

TODAY ?=                    $(shell date +%Y-%m-%d)
OBODATE ?=                  $(shell date +'%d:%m:%Y %H:%M')
VERSION=                    $(TODAY)
ANNOTATE_ONTOLOGY_VERSION = annotate -V $(ONTBASE)/releases/$(VERSION)/$@ --annotation owl:versionInfo $(VERSION)
OTHER_SRC =                 $(COMPONENTSDIR)/pato.owl $(COMPONENTSDIR)/go.owl $(COMPONENTSDIR)/go-plus.owl $(COMPONENTSDIR)/upheno.owl $(COMPONENTSDIR)/mondo-equivalents.owl $(COMPONENTSDIR)/mondo.owl $(COMPONENTSDIR)/eco.owl $(COMPONENTSDIR)/so.owl $(COMPONENTSDIR)/geno.owl $(COMPONENTSDIR)/sepio.owl $(COMPONENTSDIR)/ro.owl $(COMPONENTSDIR)/clo.owl $(COMPONENTSDIR)/efo.owl $(COMPONENTSDIR)/uberon.owl $(COMPONENTSDIR)/ncit.owl $(COMPONENTSDIR)/fbbt.owl $(COMPONENTSDIR)/wbbt.owl $(COMPONENTSDIR)/ecto.owl $(COMPONENTSDIR)/zfa.owl $(COMPONENTSDIR)/maxo.owl $(COMPONENTSDIR)/chebi.owl 
ONTOLOGYTERMS =             $(TMPDIR)/ontologyterms.txt

FORMATS = $(sort  owl owl)
FORMATS_INCL_TSV = $(sort $(FORMATS) tsv)
RELEASE_ARTEFACTS = $(sort $(ONT)-base $(ONT)-full $(ONT)-non-classified $(ONT)-base $(ONT)-full)

# ----------------------------------------
# Top-level targets
# ----------------------------------------

.PHONY: .FORCE

.PHONY: all
all: odkversion all_imports all_main all_subsets sparql_test all_reports all_assets

.PHONY: test
test: odkversion sparql_test all_reports $(REPORTDIR)/validate_profile_owl2dl_$(ONT).owl.txt
	$(ROBOT) reason --input $(SRC) --reasoner ELK  --equivalent-classes-allowed asserted-only --exclude-tautologies structural --output test.owl && rm test.owl && echo "Success"

.PHONY: odkversion
odkversion:
	echo "ODK Makefile version: $(ODK_VERSION_MAKEFILE) (this is the version of the ODK with which this Makefile was generated, not the version of the ODK you are running)" &&\
	echo "ROBOT version (ODK): " && $(ROBOT) --version

$(TMPDIR) $(REPORTDIR) :
	mkdir -p $@

## -- main targets --
##
## By default this is the cross-product of {ont, ont-base} x FORMATS

MAIN_PRODUCTS = $(sort $(foreach r,$(RELEASE_ARTEFACTS), $(r)) $(ONT))
MAIN_GZIPPED = 
MAIN_FILES = $(foreach n,$(MAIN_PRODUCTS), $(foreach f,$(FORMATS), $(n).$(f))) $(MAIN_GZIPPED)

.PHONY: all_main
all_main: $(MAIN_FILES)

## -- import targets --
##
## By default this is the cross-product of IMPORT_MODULES x FORMATS


IMPORTS =  nbo fao oba po vt stato bfo hsapdv cl mpath ncbitaxon-taxslim caro uberon-ext uberon-bridge-to-zfa uberon-bridge-to-ma uberon-bridge-to-wbbt uberon-bridge-to-fbbt uberon-bridge-to-fma uberon-bridge-to-nifstd cl-bridge-to-ma cl-bridge-to-fma cl-bridge-to-wbbt cl-bridge-to-fbbt cl-bridge-to-zfa

IMPORT_ROOTS = $(patsubst %, imports/%_import, $(IMPORTS))
IMPORT_OWL_FILES = $(foreach n,$(IMPORT_ROOTS), $(n).owl)
IMPORT_FILES = $(IMPORT_OWL_FILES)


.PHONY: all_imports
all_imports: $(IMPORT_FILES)

## -- subset targets --
##
## By default this is the cross-product of SUBSETS x FORMATS
## Note we also include TSV as a format


SUBSETS = 

SUBSET_ROOTS = $(patsubst %, subsets/%, $(SUBSETS))
SUBSET_FILES = $(foreach n,$(SUBSET_ROOTS), $(foreach f,$(FORMATS_INCL_TSV), $(n).$(f)))

.PHONY: all_subsets
all_subsets: $(SUBSET_FILES)

OBO_REPORT =  $(SRC)-obo-report
REPORTS = $(OBO_REPORT)
REPORT_FILES = $(patsubst %, $(REPORTDIR)/%.tsv, $(REPORTS))

.PHONY: robot_reports
robot_reports: $(REPORT_FILES)

.PHONY: all_reports
all_reports: all_reports_onestep $(REPORT_FILES)

$(REPORTDIR)/validate_profile_owl2dl_%.txt: % | $(REPORTDIR)
	$(ROBOT) validate-profile --profile DL -i $< -o $@
.PRECIOUS: $(REPORTDIR)/validate_profile_owl2dl_%.txt

.PHONY: validate_profile_%
validate_profile_%: $(REPORTDIR)/validate_profile_owl2dl_%.txt

## -- all files/assets --

ASSETS = \
  $(IMPORT_FILES) \
  $(MAIN_FILES) \
  $(REPORT_FILES) \
  $(SUBSET_FILES)

RELEASE_ASSETS = \
  $(MAIN_FILES) \
  $(SUBSET_FILES)

.PHONY: all_assets
all_assets: $(ASSETS)


.PHONY: show_assets
show_assets:
	echo $(ASSETS)
	du -sh $(ASSETS)


# ----------------------------------------
# Release Management
# ----------------------------------------

CLEANFILES=$(MAIN_FILES) $(SRCMERGED)
# This should be executed by the release manager whenever time comes to make a release.
# It will ensure that all assets/files are fresh, and will copy to release folder

.PHONY: prepare_release
prepare_release: $(ASSETS) $(PATTERN_RELEASE_FILES)
	rsync -R $(RELEASE_ASSETS) $(RELEASEDIR) &&\
  rm -f $(CLEANFILES) &&\
  echo "Release files are now in $(RELEASEDIR) - now you should commit, push and make a release on your git hosting site such as GitHub or GitLab"

.PHONY: prepare_initial_release
prepare_initial_release: prepare_release
	cd $(RELEASEDIR) && git add $(RELEASE_ASSETS)

# ----------------------------------------
# Import modules
# ----------------------------------------
# Most ontologies are modularly constructed using portions of other ontologies
# These live in the imports/ folder

# ------------------------
# Imports: Seeding system 
# ------------------------

# seed.txt contains all referenced entities
IMPORTSEED=$(TMPDIR)/seed.txt
SRCMERGED=$(TMPDIR)/merged-$(SRC)
PRESEED=$(TMPDIR)/pre_seed.txt

$(SRCMERGED): $(SRC)
	$(ROBOT) remove --input $< --select imports --trim false \
		merge  $(patsubst %, -i %, $(OTHER_SRC)) -o $@

$(PRESEED): $(SRCMERGED)
	$(ROBOT) query -f csv -i $< --query ../sparql/terms.sparql $@.tmp &&\
	cat $@.tmp | sort | uniq >  $@



ALLSEED = $(PRESEED) \


$(IMPORTSEED):  $(ALLSEED) 
	if [ $(IMP) = true ]; then cat $(ALLSEED) | sort | uniq > $@; fi


ANNOTATION_PROPERTIES=rdfs:label IAO:0000115 

# -- Generate Import Modules --
#
# This pattern uses ROBOT to generate an import module
# Generate terms.txt for each import.  (Assume OBO-style Possibly hacky step?)
# Should be able to drop this if robot can just take a big messy list of terms as input.
imports/%_terms_combined.txt: $(IMPORTSEED) imports/%_terms.txt
	if [ $(IMP) = true ]; then cat $^ | grep -v ^# | sort | uniq >  $@; fi


imports/merged_import.owl: mirror/merged.owl imports/merged_terms_combined.txt
	echo "ERROR: You have configured your default module type to be slme; this behavior needs to be overwritten in mo.Makefile!" && false



imports/%_import.owl: mirror/%.owl imports/%_terms_combined.txt
	if [ $(IMP) = true ]; then $(ROBOT) query -i $< --update ../sparql/preprocess-module.ru \
		extract -T imports/$*_terms_combined.txt --force true --copy-ontology-annotations true --individuals include --method BOT \
		query --update ../sparql/inject-subset-declaration.ru --update ../sparql/postprocess-module.ru \
		annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) --output $@.tmp.owl && mv $@.tmp.owl $@; fi

.PRECIOUS: imports/%_import.owl

.PHONY: refresh-imports
refresh-imports:
	make IMP=true MIR=true PAT=false IMP_LARGE=true all_imports -B

.PHONY: no-mirror-refresh-imports
no-mirror-refresh-imports:
	make IMP=true MIR=false PAT=false IMP_LARGE=true all_imports -B


.PHONY: refresh-imports-excluding-large
refresh-imports-excluding-large:
	make IMP=true MIR=true PAT=false IMP_LARGE=false all_imports -B

.PHONY: refresh-%
refresh-%:
	make IMP=true IMP_LARGE=true MIR=true PAT=false imports/$*_import.owl -B

.PHONY: no-mirror-refresh-%
no-mirror-refresh-%:
	make IMP=true IMP_LARGE=true MIR=false PAT=false imports/$*_import.owl -B


# ----------------------------------------
# Components
# ----------------------------------------
# Some ontologies contain external and internal components. A component is included in the ontology in its entirety.

$(COMPONENTSDIR)/%:
	touch $@
.PRECIOUS: $(COMPONENTSDIR)/%




$(COMPONENTSDIR)/pato.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/pato/pato-base.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/pato.owl



$(COMPONENTSDIR)/go.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://current.geneontology.org/ontology/go-base.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/go.owl



$(COMPONENTSDIR)/go-plus.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/go/extensions/go-plus.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/go-plus.owl



$(COMPONENTSDIR)/upheno.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I https://raw.githubusercontent.com/obophenotype/upheno/master/metazoa.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/upheno.owl



$(COMPONENTSDIR)/mondo-equivalents.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/mondo/imports/equivalencies.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/mondo-equivalents.owl



$(COMPONENTSDIR)/mondo.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/mondo/mondo-base.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/mondo.owl



$(COMPONENTSDIR)/eco.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/eco/eco-base.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/eco.owl



$(COMPONENTSDIR)/so.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/so.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/so.owl



$(COMPONENTSDIR)/geno.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/geno.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/geno.owl



$(COMPONENTSDIR)/sepio.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/sepio.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/sepio.owl



$(COMPONENTSDIR)/ro.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/ro.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/ro.owl



$(COMPONENTSDIR)/clo.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/clo.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/clo.owl



$(COMPONENTSDIR)/efo.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://www.ebi.ac.uk/efo/efo.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/efo.owl



$(COMPONENTSDIR)/uberon.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/uberon/uberon-base.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/uberon.owl





$(COMPONENTSDIR)/fbbt.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/fbbt/fbbt-base.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/fbbt.owl



$(COMPONENTSDIR)/wbbt.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/wbbt/wbbt-base.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/wbbt.owl



$(COMPONENTSDIR)/ecto.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/ecto/ecto-base.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/ecto.owl



$(COMPONENTSDIR)/zfa.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/zfa/zfa-base.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/zfa.owl



$(COMPONENTSDIR)/maxo.owl: .FORCE
	if [ $(IMP) = true ]; then $(ROBOT) merge -I http://purl.obolibrary.org/obo/maxo/maxo-base.owl \
	annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@; fi
.PRECIOUS: $(COMPONENTSDIR)/maxo.owl






# ----------------------------------------
# Mirroring upstream ontologies
# ----------------------------------------
#

IMP=true # Global parameter to bypass import generation
MIR=true # Global parameter to bypass mirror generation
IMP_LARGE=true # Global parameter to bypass handling of large imports


## ONTOLOGY: nbo
## Copy of nbo is re-downloaded whenever source changes
mirror/nbo.trigger: $(SRC)

mirror/nbo.owl: mirror/nbo.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/nbo/nbo-base.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/nbo.owl


## ONTOLOGY: fao
## Copy of fao is re-downloaded whenever source changes
mirror/fao.trigger: $(SRC)

mirror/fao.owl: mirror/fao.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then curl -L $(URIBASE)/fao.owl --create-dirs -o mirror/fao.owl --retry 4 --max-time 200 && $(ROBOT) convert -i mirror/fao.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/fao.owl


## ONTOLOGY: oba
## Copy of oba is re-downloaded whenever source changes
mirror/oba.trigger: $(SRC)

mirror/oba.owl: mirror/oba.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then curl -L $(URIBASE)/oba.owl --create-dirs -o mirror/oba.owl --retry 4 --max-time 200 && $(ROBOT) convert -i mirror/oba.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/oba.owl


## ONTOLOGY: po
## Copy of po is re-downloaded whenever source changes
mirror/po.trigger: $(SRC)

mirror/po.owl: mirror/po.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then curl -L $(URIBASE)/po.owl --create-dirs -o mirror/po.owl --retry 4 --max-time 200 && $(ROBOT) convert -i mirror/po.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/po.owl


## ONTOLOGY: vt
## Copy of vt is re-downloaded whenever source changes
mirror/vt.trigger: $(SRC)

mirror/vt.owl: mirror/vt.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then curl -L $(URIBASE)/vt.owl --create-dirs -o mirror/vt.owl --retry 4 --max-time 200 && $(ROBOT) convert -i mirror/vt.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/vt.owl


## ONTOLOGY: stato
## Copy of stato is re-downloaded whenever source changes
mirror/stato.trigger: $(SRC)

mirror/stato.owl: mirror/stato.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then curl -L $(URIBASE)/stato.owl --create-dirs -o mirror/stato.owl --retry 4 --max-time 200 && $(ROBOT) convert -i mirror/stato.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/stato.owl


## ONTOLOGY: bfo
## Copy of bfo is re-downloaded whenever source changes
mirror/bfo.trigger: $(SRC)

mirror/bfo.owl: mirror/bfo.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then curl -L $(URIBASE)/bfo.owl --create-dirs -o mirror/bfo.owl --retry 4 --max-time 200 && $(ROBOT) convert -i mirror/bfo.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/bfo.owl


## ONTOLOGY: hsapdv
## Copy of hsapdv is re-downloaded whenever source changes
mirror/hsapdv.trigger: $(SRC)

mirror/hsapdv.owl: mirror/hsapdv.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then curl -L $(URIBASE)/hsapdv.owl --create-dirs -o mirror/hsapdv.owl --retry 4 --max-time 200 && $(ROBOT) convert -i mirror/hsapdv.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/hsapdv.owl


## ONTOLOGY: cl
## Copy of cl is re-downloaded whenever source changes
mirror/cl.trigger: $(SRC)

mirror/cl.owl: mirror/cl.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/cl/cl-base.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/cl.owl


## ONTOLOGY: mpath
## Copy of mpath is re-downloaded whenever source changes
mirror/mpath.trigger: $(SRC)

mirror/mpath.owl: mirror/mpath.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then curl -L $(URIBASE)/mpath.owl --create-dirs -o mirror/mpath.owl --retry 4 --max-time 200 && $(ROBOT) convert -i mirror/mpath.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/mpath.owl


## ONTOLOGY: ncbitaxon-taxslim
## Copy of ncbitaxon-taxslim is re-downloaded whenever source changes
mirror/ncbitaxon-taxslim.trigger: $(SRC)

mirror/ncbitaxon-taxslim.owl: mirror/ncbitaxon-taxslim.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/ncbitaxon/subsets/taxslim.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/ncbitaxon-taxslim.owl


## ONTOLOGY: caro
## Copy of caro is re-downloaded whenever source changes
mirror/caro.trigger: $(SRC)

mirror/caro.owl: mirror/caro.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then curl -L $(URIBASE)/caro.owl --create-dirs -o mirror/caro.owl --retry 4 --max-time 200 && $(ROBOT) convert -i mirror/caro.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/caro.owl


## ONTOLOGY: uberon-ext
## Copy of uberon-ext is re-downloaded whenever source changes
mirror/uberon-ext.trigger: $(SRC)

mirror/uberon-ext.owl: mirror/uberon-ext.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/ext.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/uberon-ext.owl


## ONTOLOGY: uberon-bridge-to-zfa
## Copy of uberon-bridge-to-zfa is re-downloaded whenever source changes
mirror/uberon-bridge-to-zfa.trigger: $(SRC)

mirror/uberon-bridge-to-zfa.owl: mirror/uberon-bridge-to-zfa.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/uberon-bridge-to-zfa.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/uberon-bridge-to-zfa.owl


## ONTOLOGY: uberon-bridge-to-ma
## Copy of uberon-bridge-to-ma is re-downloaded whenever source changes
mirror/uberon-bridge-to-ma.trigger: $(SRC)

mirror/uberon-bridge-to-ma.owl: mirror/uberon-bridge-to-ma.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/uberon-bridge-to-ma.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/uberon-bridge-to-ma.owl


## ONTOLOGY: uberon-bridge-to-wbbt
## Copy of uberon-bridge-to-wbbt is re-downloaded whenever source changes
mirror/uberon-bridge-to-wbbt.trigger: $(SRC)

mirror/uberon-bridge-to-wbbt.owl: mirror/uberon-bridge-to-wbbt.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/uberon-bridge-to-wbbt.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/uberon-bridge-to-wbbt.owl


## ONTOLOGY: uberon-bridge-to-fbbt
## Copy of uberon-bridge-to-fbbt is re-downloaded whenever source changes
mirror/uberon-bridge-to-fbbt.trigger: $(SRC)

mirror/uberon-bridge-to-fbbt.owl: mirror/uberon-bridge-to-fbbt.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/uberon-bridge-to-fbbt.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/uberon-bridge-to-fbbt.owl


## ONTOLOGY: uberon-bridge-to-fma
## Copy of uberon-bridge-to-fma is re-downloaded whenever source changes
mirror/uberon-bridge-to-fma.trigger: $(SRC)

mirror/uberon-bridge-to-fma.owl: mirror/uberon-bridge-to-fma.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/uberon-bridge-to-fma.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/uberon-bridge-to-fma.owl


## ONTOLOGY: uberon-bridge-to-nifstd
## Copy of uberon-bridge-to-nifstd is re-downloaded whenever source changes
mirror/uberon-bridge-to-nifstd.trigger: $(SRC)

mirror/uberon-bridge-to-nifstd.owl: mirror/uberon-bridge-to-nifstd.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/uberon-bridge-to-nifstd.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/uberon-bridge-to-nifstd.owl


## ONTOLOGY: cl-bridge-to-ma
## Copy of cl-bridge-to-ma is re-downloaded whenever source changes
mirror/cl-bridge-to-ma.trigger: $(SRC)

mirror/cl-bridge-to-ma.owl: mirror/cl-bridge-to-ma.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/cl-bridge-to-ma.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/cl-bridge-to-ma.owl


## ONTOLOGY: cl-bridge-to-fma
## Copy of cl-bridge-to-fma is re-downloaded whenever source changes
mirror/cl-bridge-to-fma.trigger: $(SRC)

mirror/cl-bridge-to-fma.owl: mirror/cl-bridge-to-fma.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/cl-bridge-to-fma.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/cl-bridge-to-fma.owl


## ONTOLOGY: cl-bridge-to-wbbt
## Copy of cl-bridge-to-wbbt is re-downloaded whenever source changes
mirror/cl-bridge-to-wbbt.trigger: $(SRC)

mirror/cl-bridge-to-wbbt.owl: mirror/cl-bridge-to-wbbt.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/cl-bridge-to-wbbt.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/cl-bridge-to-wbbt.owl


## ONTOLOGY: cl-bridge-to-fbbt
## Copy of cl-bridge-to-fbbt is re-downloaded whenever source changes
mirror/cl-bridge-to-fbbt.trigger: $(SRC)

mirror/cl-bridge-to-fbbt.owl: mirror/cl-bridge-to-fbbt.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/cl-bridge-to-fbbt.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/cl-bridge-to-fbbt.owl


## ONTOLOGY: cl-bridge-to-zfa
## Copy of cl-bridge-to-zfa is re-downloaded whenever source changes
mirror/cl-bridge-to-zfa.trigger: $(SRC)

mirror/cl-bridge-to-zfa.owl: mirror/cl-bridge-to-zfa.trigger
	if [ $(MIR) = true ] && [ $(IMP) = true ]; then $(ROBOT) convert -I http://purl.obolibrary.org/obo/uberon/bridge/cl-bridge-to-zfa.owl -o $@.tmp.owl && mv $@.tmp.owl $@; fi
.PRECIOUS: mirror/cl-bridge-to-zfa.owl




# ----------------------------------------
# Subsets
# ----------------------------------------
subsets/%.tsv: subsets/%.owl
	$(ROBOT) query -f tsv -i $< -s ../sparql/labels.sparql $@
.PRECIOUS: subsets/%.tsv

subsets/%.owl: $(ONT).owl
	$(OWLTOOLS) $< --extract-ontology-subset --fill-gaps --subset $* -o $@.tmp.owl && mv $@.tmp.owl $@ &&\
	$(ROBOT) annotate --input $@ --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) -o $@.tmp.owl && mv $@.tmp.owl $@
.PRECIOUS: subsets/%.owl



# ----------------------------------------
# Release
# ----------------------------------------
# copy from staging area (this directory) to top-level
.PHONY: release
release: $(ONT).owl $(ONT).obo
	cp $^ $(RELEASEDIR) && cp imports/* $(RELEASEDIR)/imports

# ----------------------------------------
# Sparql queries: Q/C
# ----------------------------------------

# these live in the ../sparql directory, and have suffix -violation.sparql
# adding the name here will make the violation check live.
# NOTE: these will soon be phased out and replaced by robot-report

#  run all violation checks
SPARQL_VALIDATION_QUERIES = $(foreach V,$(SPARQL_VALIDATION_CHECKS),$(SPARQLDIR)/$(V)-violation.sparql)
sparql_test: $(SRC) catalog-v001.xml | $(REPORTDIR)
ifneq ($(SPARQL_VALIDATION_QUERIES),)
	$(ROBOT) verify  --catalog catalog-v001.xml -i $< --queries $(SPARQL_VALIDATION_QUERIES) -O $(REPORTDIR)
endif

# ----------------------------------------
# ROBOT report
# ----------------------------------------

$(REPORTDIR)/$(SRC)-obo-report.tsv: $(SRCMERGED) | $(REPORTDIR)
	$(ROBOT) report -i $< $(REPORT_LABEL) $(REPORT_PROFILE_OPTS) --fail-on $(REPORT_FAIL_ON) --print 5 -o $@

$(REPORTDIR)/%-obo-report.tsv: % | $(REPORTDIR)
	$(ROBOT) report -i $< $(REPORT_LABEL) $(REPORT_PROFILE_OPTS) --fail-on $(REPORT_FAIL_ON) --print 5 -o $@

# ----------------------------------------
# Sparql queries: Exports
# ----------------------------------------

SPARQL_EXPORTS_ARGS = $(foreach V,$(SPARQL_EXPORTS),-s $(SPARQLDIR)/$(V).sparql $(REPORTDIR)/$(V).tsv)
# This combines all into one single command

.PHONY: all_reports_onestep
all_reports_onestep: $(SRC) | $(REPORTDIR)
ifneq ($(SPARQL_EXPORTS_ARGS),)
	$(ROBOT) query -f tsv -i $< $(SPARQL_EXPORTS_ARGS)
endif

# ----------------------------------------
# Release artefacts: export formats
# ----------------------------------------


# We always want a base - even if it is not explicitly configured..
# We always want a full release - even if it is not explicitly configured..
# ----------------------------------------
# Release artefacts: main release artefacts
# ----------------------------------------

$(ONT).owl: $(ONT)-full.owl
	$(ROBOT) annotate --input $< --ontology-iri $(URIBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) \
		convert -o $@.tmp.owl && mv $@.tmp.owl $@

# -----------------------------------------------------
# Release artefacts: variants (base, full, simple, etc)
# -----------------------------------------------------
SHARED_ROBOT_COMMANDS = 

$(ONTOLOGYTERMS): $(SRC) $(OTHER_SRC)
	touch $(ONTOLOGYTERMS) && \
	$(ROBOT) query --use-graphs true -f csv -i $< --query ../sparql/mo_terms.sparql $@






# base: OTHER sources of interest, such as definitions owl
$(ONT)-base.owl: $(SRC) $(OTHER_SRC)
	$(ROBOT) remove --input $< --select imports --trim false \
		merge $(patsubst %, -i %, $(OTHER_SRC)) \
		 $(SHARED_ROBOT_COMMANDS) annotate --link-annotation http://purl.org/dc/elements/1.1/type http://purl.obolibrary.org/obo/IAO_8000001 \
		--ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) \
		--output $@.tmp.owl && mv $@.tmp.owl $@

# Full: The full artefacts with imports merged, reasoned
$(ONT)-full.owl: $(SRC) $(OTHER_SRC)
	$(ROBOT) merge --input $< \
		reason --reasoner ELK --equivalent-classes-allowed asserted-only --exclude-tautologies structural \
		relax \
		reduce -r ELK \
		$(SHARED_ROBOT_COMMANDS) annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) --output $@.tmp.owl && mv $@.tmp.owl $@

# foo-non-classified: (edit->imports-merged)
$(ONT)-non-classified.owl: $(SRC) $(OTHER_SRC)
	$(ROBOT) merge --input $< \
		$(SHARED_ROBOT_COMMANDS) annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) --output $@.tmp.owl && mv $@.tmp.owl $@
# ----------------------------------------
# Debugging Tools
# ----------------------------------------

explain_unsat: $(SRC) 
	$(ROBOT) explain -i $(SRC) -M unsatisfiability --unsatisfiable random:10 --explanation $(TMPDIR)/$@.md





.PHONY: normalize_src
normalize_src: $(SRC)
	$(ROBOT) convert -i $< -f ofn -o tmp/normalise && mv tmp/normalise $<


.PHONY: validate_idranges
validate_idranges:
	amm $(SCRIPTSDIR)/validate_id_ranges.sc mo-idranges.owl

.PHONY: update_repo
update_repo:
	sh $(SCRIPTSDIR)/update_repo.sh
	


include mo.Makefile